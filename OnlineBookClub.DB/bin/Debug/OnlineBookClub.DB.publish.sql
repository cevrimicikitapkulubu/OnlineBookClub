/*
Deployment script for OnlineBookClub

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "OnlineBookClub"
:setvar DefaultFilePrefix "OnlineBookClub"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AI
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC ON,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Schema [Auth]...';


GO
CREATE SCHEMA [Auth]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [Const]...';


GO
CREATE SCHEMA [Const]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [Event]...';


GO
CREATE SCHEMA [Event]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating User-Defined Data Type [dbo].[Gender]...';


GO
CREATE TYPE [dbo].[Gender]
    FROM CHAR (1) NOT NULL;


GO
PRINT N'Creating Table [Auth].[UserRoles]...';


GO
CREATE TABLE [Auth].[UserRoles] (
    [ID]   TINYINT      IDENTITY (1, 1) NOT NULL,
    [Name] VARCHAR (16) NOT NULL,
    CONSTRAINT [PK_UserRoles] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [Auth].[Users]...';


GO
CREATE TABLE [Auth].[Users] (
    [ID]           INT                IDENTITY (1, 1) NOT NULL,
    [FirstName]    NVARCHAR (48)      NOT NULL,
    [LastName]     NVARCHAR (48)      NOT NULL,
    [DepartmentID] SMALLINT           NOT NULL,
    [UserRoleID]   TINYINT            NOT NULL,
    [Gender]       [dbo].[Gender]     NOT NULL,
    [SchoolID]     SMALLINT           NOT NULL,
    [SchoolNo]     VARCHAR (8)        NULL,
    [IsActive]     BIT                NOT NULL,
    [IsDeleted]    BIT                NOT NULL,
    [CreatedDate]  DATETIMEOFFSET (7) NOT NULL,
    [ModifiedDate] DATETIMEOFFSET (7) NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating Index [Auth].[Users].[IX_Users_SchoolID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Users_SchoolID]
    ON [Auth].[Users]([SchoolID] ASC)
    INCLUDE([FirstName], [LastName], [Gender], [SchoolNo], [IsActive], [IsDeleted], [CreatedDate], [ModifiedDate]) WHERE ([IsDeleted] = 0) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating Index [Auth].[Users].[IX_Users_SchoolNo]...';


GO
CREATE NONCLUSTERED INDEX [IX_Users_SchoolNo]
    ON [Auth].[Users]([SchoolNo] ASC)
    INCLUDE([FirstName], [LastName], [Gender], [SchoolID], [IsActive], [IsDeleted], [CreatedDate], [ModifiedDate]) WHERE ([IsDeleted] = 0) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating Table [Const].[Schools]...';


GO
CREATE TABLE [Const].[Schools] (
    [ID]         SMALLINT       IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (128) NOT NULL,
    [DistrictID] SMALLINT       NOT NULL,
    CONSTRAINT [PK_Schools] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating Table [Const].[Districts]...';


GO
CREATE TABLE [Const].[Districts] (
    [ID]     SMALLINT      IDENTITY (1, 1) NOT NULL,
    [Name]   NVARCHAR (32) NOT NULL,
    [CityID] SMALLINT      NOT NULL,
    CONSTRAINT [PK_Districts] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating Table [Const].[Departments]...';


GO
CREATE TABLE [Const].[Departments] (
    [ID]   SMALLINT      IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (48) NOT NULL,
    CONSTRAINT [PK_Departments] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating Table [Const].[Cities]...';


GO
CREATE TABLE [Const].[Cities] (
    [ID]   SMALLINT      IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (32) NOT NULL,
    CONSTRAINT [PK_Cities] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating Table [Event].[Locations]...';


GO
CREATE TABLE [Event].[Locations] (
    [ID]          INT               IDENTITY (1, 1) NOT NULL,
    [IsOnline]    BIT               NOT NULL,
    [Title]       NVARCHAR (32)     NOT NULL,
    [Description] NVARCHAR (MAX)    NOT NULL,
    [Geography]   [sys].[geography] NULL,
    CONSTRAINT [PK_Locations] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (FILLFACTOR = 70, OPTIMIZE_FOR_SEQUENTIAL_KEY = ON)
);


GO
PRINT N'Creating Table [Event].[EventSubjects]...';


GO
CREATE TABLE [Event].[EventSubjects] (
    [EventID]        INT                NOT NULL,
    [RowNumber]      TINYINT            NOT NULL,
    [Question]       NVARCHAR (512)     NOT NULL,
    [IsActive]       BIT                NOT NULL,
    [IsDeleted]      BIT                NOT NULL,
    [CreatedDate]    DATETIMEOFFSET (7) NOT NULL,
    [CreatedUserID]  INT                NOT NULL,
    [ModifiedDate]   DATETIMEOFFSET (7) NULL,
    [ModifiedUserID] INT                NULL,
    CONSTRAINT [PK_EventSubjects] PRIMARY KEY CLUSTERED ([EventID] ASC, [RowNumber] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating Index [Event].[EventSubjects].[UX_EventSubjects_EventID_Question]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_EventSubjects_EventID_Question]
    ON [Event].[EventSubjects]([EventID] ASC, [Question] ASC) WHERE ([IsActive] = 1 AND [IsDeleted] = 0) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating Table [Event].[Events]...';


GO
CREATE TABLE [Event].[Events] (
    [ID]             INT                IDENTITY (1, 1) NOT NULL,
    [ISBN]           CHAR (13)          NOT NULL,
    [Title]          NVARCHAR (64)      NOT NULL,
    [StartDate]      DATETIMEOFFSET (7) NOT NULL,
    [SchoolID]       SMALLINT           NOT NULL,
    [LocationID]     INT                NOT NULL,
    [IsActive]       BIT                NOT NULL,
    [IsDeleted]      BIT                NOT NULL,
    [CreatedDate]    DATETIMEOFFSET (7) NOT NULL,
    [CreatedUserID]  INT                NOT NULL,
    [ModifiedDate]   DATETIMEOFFSET (7) NULL,
    [ModifiedUserID] INT                NULL,
    CONSTRAINT [PK_Events] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating Index [Event].[Events].[IX_Events_StartDate_SchoolID_LocationID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Events_StartDate_SchoolID_LocationID]
    ON [Event].[Events]([StartDate] ASC, [SchoolID] ASC, [LocationID] ASC)
    INCLUDE([ISBN]) WHERE ([IsActive] = 1 AND [IsDeleted] = 0) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating Table [Event].[EventRequirements]...';


GO
CREATE TABLE [Event].[EventRequirements] (
    [EventID]        INT                NOT NULL,
    [SchoolID]       SMALLINT           NOT NULL,
    [DepartmentID]   SMALLINT           NULL,
    [UserRoleID]     TINYINT            NULL,
    [Gender]         [dbo].[Gender]     NULL,
    [IsActive]       BIT                NOT NULL,
    [IsDeleted]      BIT                NOT NULL,
    [CreatedDate]    DATETIMEOFFSET (7) NOT NULL,
    [CreatedUserID]  INT                NOT NULL,
    [ModifiedDate]   DATETIMEOFFSET (7) NULL,
    [ModifiedUserID] INT                NULL,
    CONSTRAINT [PK_EventRequirements] PRIMARY KEY CLUSTERED ([EventID] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating Table [Event].[EventRatings]...';


GO
CREATE TABLE [Event].[EventRatings] (
    [EventID]     INT                NOT NULL,
    [UserID]      INT                NOT NULL,
    [Rating]      TINYINT            NULL,
    [Description] NVARCHAR (256)     NULL,
    [CreatedDate] DATETIMEOFFSET (7) NOT NULL,
    CONSTRAINT [PK_EventRatings] PRIMARY KEY CLUSTERED ([EventID] ASC, [UserID] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating Table [Event].[EventParticipants]...';


GO
CREATE TABLE [Event].[EventParticipants] (
    [EventID]      INT                NOT NULL,
    [UserID]       INT                NOT NULL,
    [Rating]       TINYINT            NULL,
    [Description]  NVARCHAR (256)     NULL,
    [CreatedDate]  DATETIMEOFFSET (7) NOT NULL,
    [ModifiedDate] DATETIMEOFFSET (7) NOT NULL,
    CONSTRAINT [PK_EventParticipants] PRIMARY KEY CLUSTERED ([EventID] ASC, [UserID] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating Table [Event].[EventDetails]...';


GO
CREATE TABLE [Event].[EventDetails] (
    [EventID]     INT             NOT NULL,
    [Description] NVARCHAR (4000) NOT NULL,
    CONSTRAINT [PK_EventDetails] PRIMARY KEY CLUSTERED ([EventID] ASC)
);


GO
PRINT N'Creating Default Constraint [Auth].[DF_Users_IsActive]...';


GO
ALTER TABLE [Auth].[Users]
    ADD CONSTRAINT [DF_Users_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating Default Constraint [Auth].[DF_Users_IsDeleted]...';


GO
ALTER TABLE [Auth].[Users]
    ADD CONSTRAINT [DF_Users_IsDeleted] DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating Default Constraint [Auth].[DF_Users_CreatedDate]...';


GO
ALTER TABLE [Auth].[Users]
    ADD CONSTRAINT [DF_Users_CreatedDate] DEFAULT (GETUTCDATE()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [Event].[DF_EventSubjects_IsActive]...';


GO
ALTER TABLE [Event].[EventSubjects]
    ADD CONSTRAINT [DF_EventSubjects_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating Default Constraint [Event].[DF_EventSubjects_IsDeleted]...';


GO
ALTER TABLE [Event].[EventSubjects]
    ADD CONSTRAINT [DF_EventSubjects_IsDeleted] DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating Default Constraint [Event].[DF_EventSubjects_CreatedDate]...';


GO
ALTER TABLE [Event].[EventSubjects]
    ADD CONSTRAINT [DF_EventSubjects_CreatedDate] DEFAULT (GETUTCDATE()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [Event].[DF_Events_IsActive]...';


GO
ALTER TABLE [Event].[Events]
    ADD CONSTRAINT [DF_Events_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating Default Constraint [Event].[DF_Events_IsDeleted]...';


GO
ALTER TABLE [Event].[Events]
    ADD CONSTRAINT [DF_Events_IsDeleted] DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating Default Constraint [Event].[DF_Events_CreatedDate]...';


GO
ALTER TABLE [Event].[Events]
    ADD CONSTRAINT [DF_Events_CreatedDate] DEFAULT (GETUTCDATE()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [Event].[DF_EventRequirements_IsActive]...';


GO
ALTER TABLE [Event].[EventRequirements]
    ADD CONSTRAINT [DF_EventRequirements_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating Default Constraint [Event].[DF_EventRequirements_IsDeleted]...';


GO
ALTER TABLE [Event].[EventRequirements]
    ADD CONSTRAINT [DF_EventRequirements_IsDeleted] DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating Default Constraint [Event].[DF_EventRequirements_CreatedDate]...';


GO
ALTER TABLE [Event].[EventRequirements]
    ADD CONSTRAINT [DF_EventRequirements_CreatedDate] DEFAULT (GETUTCDATE()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [Event].[DF_EventRatings_CreatedDate]...';


GO
ALTER TABLE [Event].[EventRatings]
    ADD CONSTRAINT [DF_EventRatings_CreatedDate] DEFAULT (GETUTCDATE()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [Event].[DF_EventParticipants_CreatedDate]...';


GO
ALTER TABLE [Event].[EventParticipants]
    ADD CONSTRAINT [DF_EventParticipants_CreatedDate] DEFAULT (GETUTCDATE()) FOR [CreatedDate];


GO
PRINT N'Creating Foreign Key [Auth].[FK_Users_DepartmentID_Departments]...';


GO
ALTER TABLE [Auth].[Users]
    ADD CONSTRAINT [FK_Users_DepartmentID_Departments] FOREIGN KEY ([DepartmentID]) REFERENCES [Const].[Departments] ([ID]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [Auth].[FK_Users_UserRoleID_UserRoles]...';


GO
ALTER TABLE [Auth].[Users]
    ADD CONSTRAINT [FK_Users_UserRoleID_UserRoles] FOREIGN KEY ([UserRoleID]) REFERENCES [Auth].[UserRoles] ([ID]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [Auth].[FK_Users_SchoolID_Schools]...';


GO
ALTER TABLE [Auth].[Users]
    ADD CONSTRAINT [FK_Users_SchoolID_Schools] FOREIGN KEY ([SchoolID]) REFERENCES [Const].[Schools] ([ID]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [Const].[PK_Schools_DistrictID_DistrictID]...';


GO
ALTER TABLE [Const].[Schools]
    ADD CONSTRAINT [PK_Schools_DistrictID_DistrictID] FOREIGN KEY ([DistrictID]) REFERENCES [Const].[Districts] ([ID]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [Const].[FK_Districts_CityID_Cities]...';


GO
ALTER TABLE [Const].[Districts]
    ADD CONSTRAINT [FK_Districts_CityID_Cities] FOREIGN KEY ([CityID]) REFERENCES [Const].[Cities] ([ID]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [Event].[FK_EventSubjects_EventID_Events]...';


GO
ALTER TABLE [Event].[EventSubjects]
    ADD CONSTRAINT [FK_EventSubjects_EventID_Events] FOREIGN KEY ([EventID]) REFERENCES [Event].[Events] ([ID]);


GO
PRINT N'Creating Foreign Key [Event].[FK_Events_SchoolID_Schools]...';


GO
ALTER TABLE [Event].[Events]
    ADD CONSTRAINT [FK_Events_SchoolID_Schools] FOREIGN KEY ([SchoolID]) REFERENCES [Const].[Schools] ([ID]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [Event].[FK_Events_LocationID_Locations]...';


GO
ALTER TABLE [Event].[Events]
    ADD CONSTRAINT [FK_Events_LocationID_Locations] FOREIGN KEY ([LocationID]) REFERENCES [Event].[Locations] ([ID]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [Event].[FK_Events_CreatedUserID_Users]...';


GO
ALTER TABLE [Event].[Events]
    ADD CONSTRAINT [FK_Events_CreatedUserID_Users] FOREIGN KEY ([CreatedUserID]) REFERENCES [Auth].[Users] ([ID]);


GO
PRINT N'Creating Foreign Key [Event].[FK_Events_ModifiedUserID_Users]...';


GO
ALTER TABLE [Event].[Events]
    ADD CONSTRAINT [FK_Events_ModifiedUserID_Users] FOREIGN KEY ([ModifiedUserID]) REFERENCES [Auth].[Users] ([ID]);


GO
PRINT N'Creating Foreign Key [Event].[FK_EventRequirements_SchoolID_Schools]...';


GO
ALTER TABLE [Event].[EventRequirements]
    ADD CONSTRAINT [FK_EventRequirements_SchoolID_Schools] FOREIGN KEY ([SchoolID]) REFERENCES [Const].[Schools] ([ID]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [Event].[FK_EventRequirements_DepartmentID_Departments]...';


GO
ALTER TABLE [Event].[EventRequirements]
    ADD CONSTRAINT [FK_EventRequirements_DepartmentID_Departments] FOREIGN KEY ([DepartmentID]) REFERENCES [Const].[Departments] ([ID]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [Event].[FK_EventRequirements_UserRoleID_UserRoles]...';


GO
ALTER TABLE [Event].[EventRequirements]
    ADD CONSTRAINT [FK_EventRequirements_UserRoleID_UserRoles] FOREIGN KEY ([UserRoleID]) REFERENCES [Auth].[UserRoles] ([ID]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [Event].[FK_EventRequirements_CreatedUserID_Users]...';


GO
ALTER TABLE [Event].[EventRequirements]
    ADD CONSTRAINT [FK_EventRequirements_CreatedUserID_Users] FOREIGN KEY ([CreatedUserID]) REFERENCES [Auth].[Users] ([ID]);


GO
PRINT N'Creating Foreign Key [Event].[FK_EventRequirements_ModifiedUserID_Users]...';


GO
ALTER TABLE [Event].[EventRequirements]
    ADD CONSTRAINT [FK_EventRequirements_ModifiedUserID_Users] FOREIGN KEY ([ModifiedUserID]) REFERENCES [Auth].[Users] ([ID]);


GO
PRINT N'Creating Foreign Key [Event].[FK_EventRatings_EventID_Events]...';


GO
ALTER TABLE [Event].[EventRatings]
    ADD CONSTRAINT [FK_EventRatings_EventID_Events] FOREIGN KEY ([EventID]) REFERENCES [Event].[Events] ([ID]);


GO
PRINT N'Creating Foreign Key [Event].[FK_EventParticipants_EventID_Events]...';


GO
ALTER TABLE [Event].[EventParticipants]
    ADD CONSTRAINT [FK_EventParticipants_EventID_Events] FOREIGN KEY ([EventID]) REFERENCES [Event].[Events] ([ID]);


GO
PRINT N'Creating Foreign Key [Event].[FK_EventDetails_EventID_Events]...';


GO
ALTER TABLE [Event].[EventDetails]
    ADD CONSTRAINT [FK_EventDetails_EventID_Events] FOREIGN KEY ([EventID]) REFERENCES [Event].[Events] ([ID]);


GO
PRINT N'Creating Check Constraint [Event].[CHK_EventSubjects]...';


GO
ALTER TABLE [Event].[EventSubjects]
    ADD CONSTRAINT [CHK_EventSubjects] CHECK ([RowNumber] BETWEEN 1 AND 5);


GO
PRINT N'Creating Check Constraint [Event].[CHK_Events_ISBN]...';


GO
ALTER TABLE [Event].[Events]
    ADD CONSTRAINT [CHK_Events_ISBN] CHECK (ISBN NOT LIKE '%[^0-9]%' AND LEN(ISBN) = 13);


GO
PRINT N'Creating Check Constraint [Event].[CHK_EventRatings_Rating]...';


GO
ALTER TABLE [Event].[EventRatings]
    ADD CONSTRAINT [CHK_EventRatings_Rating] CHECK ([Rating] BETWEEN 1 AND 5);


GO
PRINT N'Creating Check Constraint [Event].[CHK_EventParticipants_Rating]...';


GO
ALTER TABLE [Event].[EventParticipants]
    ADD CONSTRAINT [CHK_EventParticipants_Rating] CHECK ([Rating] BETWEEN 1 AND 5);


GO
PRINT N'Creating Function [Event].[FN_CheckIfTotalNumberOfQuestionsIsCorrect]...';


GO
CREATE FUNCTION [Event].[FN_CheckIfTotalNumberOfQuestionsIsCorrect]
(
    @pEventID   INT
)
RETURNS BIT
AS
BEGIN
    DECLARE @vResult BIT    = 0;

    IF (SELECT COUNT(1) FROM Event.EventSubjects AS es WHERE es.EventID = @pEventID) BETWEEN 0 AND 5
        SET @vResult = 1;

    RETURN @vResult;
END
GO
PRINT N'Creating Check Constraint [Event].[CHK_EventSubjects_CheckIfTotalNumberOfQuestionsIsCorrect]...';


GO
ALTER TABLE [Event].[EventSubjects]
    ADD CONSTRAINT [CHK_EventSubjects_CheckIfTotalNumberOfQuestionsIsCorrect] CHECK (Event.FN_CheckIfTotalNumberOfQuestionsIsCorrect(EventID) = 1);


GO
PRINT N'Creating Rule [dbo].[CheckGender]...';


GO
CREATE RULE [dbo].[CheckGender]
    AS @list IN ('E', 'K');


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
/*
r .\BindRule.sql
*/
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
